alias gpl='git pull'
alias gp='git push && echo "git push"'
alias gpf='git push --force-with-lease && echo "git push --force-with-lease"'
alias gps='git push --set-upstream origin "$(git branch --show-current)"' # use this when you push a new branch and git says: "fatal: The current branch kaniko-builds has no upstream branch."
alias gco='git checkout'
alias gcom='git checkout main || git checkout master'
alias gcob='git checkout -b'
alias gcm='git commit -m'
alias gca='git commit --amend --date=now' # this is like gc, but we want to edit the commit message
alias gc='gca --no-edit && echo "git commit --amend --no-edit --date=now"'
alias gf='git fetch origin && echo "fetched origin"'
alias grm='gf && git rebase origin/main || git rebase origin/master'
alias gr='git rebase --onto'
alias grc='git rebase --continue'
alias gra='git rebase --abort'
alias grl='git reflog'
alias gl='git log'
alias gs='git status'
alias ga='git add'
alias gd='git diff'

# TODO: use rg over grep?
# alias rmoldbranches='git branch --merged | grep -v \* | xargs git branch -D'
# alias rmoldbranches='git branch --merged main | grep -v "^\* main" | xargs -n 1 -r git branch -d'
# alias rmoldbranches="git branch --merged | grep -v '\*\|master\|main\|develop' | xargs -n 1 git branch -d"
alias rmoldbranches='git branch --merged | egrep -v "(^\*|master|main|dev)" | xargs git branch -d'

# Define the alias to rename the Git branch and remote
alias rename-branch='rename_branch'

# Function to rename the current branch and its remote counterpart
rename_branch() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: git-rename-branch NEW_BRANCH_NAME"
        return 1
    fi

    local new_branch="$1"
    local current_branch=$(git rev-parse --abbrev-ref HEAD)

    if [ "$current_branch" = "HEAD" ]; then
        echo "Cannot rename detached HEAD. Switch to a branch first."
        return 1
    fi

    # Rename the local branch
    git branch -m "$new_branch"

    git push --set-upstream origin "$new_branch"
    git push origin --delete "$current_branch"
}

