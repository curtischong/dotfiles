source "$HOME/.commonrc"
alias sr="export MANUALLY_SOURCING_RC=true && source $HOME/.bashrc && echo sourced bashrc;" # sr means: source .bashrc
alias vr="vim $HOME/.bashrc"  # vr means: vim .bashrc
alias vcbrc="vim $HOME/.commonbashrc"  # vcbrc means: vim .commonbashrc

# Append to the history file, don't overwrite it
shopt -s histappend
# Save and reload the history after each command finishes
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

[[ $- == *i* ]] && stty -ixon # Allows for forward search via ctrl + s

shopt -s autocd # allows you to cd into a directory by just typing its name
# e.g. typing ".." will cd into the parent directory

HISTCONTROL=ignorespace # don't remember commands that are ran and started with a space
HISTCONTROL=ignoredups # don't remember commands that are ran twice in a row

# fzf complete makefile commands: https://stackoverflow.com/a/71966611/4647924
complete -W "\`grep -oE '^[a-zA-Z0-9_.-]+[\\:]*[a-zA-Z0-9_.-]+:([^=]|$)' ?akefile | sort | uniq | sed 's/[^a-zA-Z0-9_.-]*$//' | sed 's/[\]//g' | fzf\`" make

# git brach auto completion
test -f "$HOME/.git-completion.bash" && . $_

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
print_before_the_prompt () { # makes it so the terminal lines have color
  printf "\e[1;31m%s: \e[1;33m%s \e[1;92m%s \e[1;0m"  "$USER" "$PWD" "$(parse_git_branch)"
}
PROMPT_COMMAND=print_before_the_prompt

export PS1='\n->'
export PATH=$PATH:/home/ec2-user/go/bin

# I tried putting this logic in .commonrc but it didn't work. it needs to be sourced at the end of the .bashrc file
export PATH="$HOME/.local/bin:$PATH"
eval "$(zoxide init bash)"
function cd(){
     z "$@" &&
     pwd > "$HOME/.last_dir"
}
function ccd(){
     zi "$@" &&
     pwd > "$HOME/.last_dir"
}

# Justfile tab completion support
# https://chatgpt.com/share/67c5255b-1040-800e-a418-02d00ba9e7cd
# Function to provide fzf-based completions for "just"
_just_fzf_completion() {
  # Only trigger if completing the first argument (the task name)
  if [ "$COMP_CWORD" -eq 1 ]; then
    local file="justfile"
    if [ ! -f "$file" ]; then
      return 0
    fi

    # Extract task names (assumes tasks are defined as "task:" at the start of a line)
    local tasks
    tasks=$(grep -E '^[[:alnum:]_-]+:' "$file" | sed 's/://')
    if [ -z "$tasks" ]; then
      return 0
    fi

    # Use fzf for interactive selection; pass the current word as query
    local selection
    selection=$(echo "$tasks" | fzf --height 40% --query "${COMP_WORDS[COMP_CWORD]}")
    if [ -n "$selection" ]; then
      COMPREPLY=("$selection")
    fi
  fi
}

# Register the completion function for the "just" command
complete -F _just_fzf_completion just
